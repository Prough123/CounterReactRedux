{"version":3,"sources":["componets/ResetViewController/ResetViewController.module.css","App.module.css","componets/Setup/Setup.module.css","state/actions.ts","componets/Setup/Setup.tsx","componets/Buttons/Buttons.tsx","state/counter-reducer.ts","state/selectors.ts","componets/ResetViewController/ResetViewController.tsx","App.tsx","serviceWorker.ts","state/redux-store.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","Setup","React","memo","props","className","style","container","Input","type","value","minValue","error","disable","disabledSetValue","onChange","onSetMinValue","maxValue","onSetMaxValue","Buttons","Button","variant","color","disabled","disableBtn","disabledIncValue","onClick","incValue","onChangeSetValue","disabledDecValue","decValue","makeActions","payload","setSettingsAC","SET_SETTINGS","incValueAC","INCREASE_VALUE","decValueAC","DECREASE_VALUE","setInterimMinValueAC","SET_INTERIM_MIN_VALUE","setInterimMaxValueAC","SET_INTERIM_MAX_VALUE","setDisableAC","SET_DISABLE","setErrorMessageAC","SET_ERROR","initialState","interimValueMin","interimValueMax","disabledResetValue","errorMessage","currentValue","selectStateCounter","state","counter","ResetViewController","textError","reset","App","useSelector","dispatch","useDispatch","useState","min","setMin","max","setMax","useCallback","setValue","e","currentTarget","increaseValue","getState","decreaseValue","resetValue","app","Paper","elevation","Boolean","window","location","hostname","match","reducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.755ad569.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ResetViewController_container__1iiij\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__J-qCh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Setup_container__2Qk8F\"};","export enum ACTIONS_TYPE {\r\n    INCREASE_VALUE = 'INCREASE_VALUE',\r\n    SET_INTERIM_MIN_VALUE = 'SET_INTERIM_MIN_VALUE',\r\n    SET_INTERIM_MAX_VALUE = 'SET_INTERIM_MAX_VALUE',\r\n    DECREASE_VALUE = 'DECREASE_VALUE',\r\n    SET_DISABLE = 'SET_DISABLE',\r\n    SET_SETTINGS = 'SET_SETTINGS',\r\n    SET_ERROR = 'SET_ERROR',\r\n    errorText = 'set value pls',\r\n}\r\n\r\nexport type setSettingsPayload = {\r\n    minValue: number\r\n    maxValue: number\r\n}\r\nexport type setInterimMinValuePayload = {\r\n    min: number\r\n}\r\nexport type setInterimMaxValuePayload = {\r\n    max: number\r\n}\r\nexport type setDisablePayload = {\r\n    disabledSetValue: boolean,\r\n    disabledIncValue: boolean,\r\n    disabledDecValue: boolean,\r\n    disabledResetValue: boolean\r\n}\r\nexport type setErrorMessagePayload = {\r\n    error: boolean\r\n}\r\nexport type incValuePayload = {}\r\nexport type decValuePayload = {}\r\n\r\nconst makeActions = <T extends ACTIONS_TYPE, P>(type: T) => (payload: P) => ({type, payload})\r\n\r\nexport const setSettingsAC = makeActions<ACTIONS_TYPE.SET_SETTINGS, setSettingsPayload>(ACTIONS_TYPE.SET_SETTINGS)\r\nexport const incValueAC = makeActions<ACTIONS_TYPE.INCREASE_VALUE, incValuePayload>(ACTIONS_TYPE.INCREASE_VALUE)\r\nexport const decValueAC = makeActions<ACTIONS_TYPE.DECREASE_VALUE, decValuePayload>(ACTIONS_TYPE.DECREASE_VALUE)\r\nexport const setInterimMinValueAC = makeActions<ACTIONS_TYPE.SET_INTERIM_MIN_VALUE, setInterimMinValuePayload>(ACTIONS_TYPE.SET_INTERIM_MIN_VALUE)\r\nexport const setInterimMaxValueAC = makeActions<ACTIONS_TYPE.SET_INTERIM_MAX_VALUE, setInterimMaxValuePayload>(ACTIONS_TYPE.SET_INTERIM_MAX_VALUE)\r\nexport const setDisableAC = makeActions<ACTIONS_TYPE.SET_DISABLE, setDisablePayload>(ACTIONS_TYPE.SET_DISABLE)\r\nexport const setErrorMessageAC = makeActions<ACTIONS_TYPE.SET_ERROR, setErrorMessagePayload>(ACTIONS_TYPE.SET_ERROR)\r\n\r\ninterface IStringMap<T> {\r\n    [key: string]: T\r\n}\r\n\r\ntype IAnyFunction = (...args: any[]) => any\r\n\r\ntype IActionUnion<A extends IStringMap<IAnyFunction>> = ReturnType<A[keyof A]>\r\n\r\nconst actions = {\r\n    setSettingsAC, setInterimMinValueAC,\r\n    setInterimMaxValueAC, setDisableAC,\r\n    setErrorMessageAC, incValueAC,\r\n    decValueAC\r\n}\r\n\r\nexport type ActionsType = IActionUnion<typeof actions>\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Button, Input} from \"@material-ui/core\";\r\nimport style from './Setup.module.css'\r\n\r\ntype SetValueType = {\r\n    error: boolean\r\n    onSetMinValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onSetMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n\r\n    disable: {\r\n        disabledSetValue: boolean\r\n        disabledIncValue: boolean\r\n        disabledDecValue: boolean\r\n        disabledResetValue: boolean\r\n    }\r\n    minValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Setup = React.memo((props: SetValueType) => {\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div>\r\n                <div>Min</div>\r\n                <Input type=\"number\" value={props.minValue} error={props.disable.disabledSetValue}\r\n                       onChange={props.onSetMinValue}/>\r\n            </div>\r\n\r\n            <div>\r\n                <div>Max</div>\r\n                <Input type=\"number\" value={props.maxValue} error={props.disable.disabledSetValue}\r\n                       onChange={props.onSetMaxValue}/>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})\r\n","import React from 'react'\r\nimport {Button} from \"@material-ui/core\";\r\nimport style from \"../ResetViewController/ResetViewController.module.css\"\r\n\r\ntype OutputType = {\r\n    onChangeSetValue: () => void\r\n\r\n    incValue: () => void\r\n    decValue: () => void\r\n    maxValue: number\r\n    minValue: number\r\n    disableBtn: {\r\n        disabledSetValue: boolean\r\n        disabledIncValue: boolean\r\n        disabledDecValue: boolean\r\n        disabledResetValue: boolean\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const Buttons = React.memo((props: OutputType) => {\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <Button variant=\"contained\" color=\"secondary\" disabled={props.disableBtn.disabledIncValue}\r\n                    onClick={props.incValue}>+</Button>\r\n            <Button variant=\"contained\" color=\"secondary\" disabled={props.disableBtn.disabledSetValue}\r\n                    onClick={props.onChangeSetValue}>Set Value</Button>\r\n            <Button variant=\"contained\" color=\"secondary\" disabled={props.disableBtn.disabledDecValue}\r\n                    onClick={props.decValue}>-</Button>\r\n\r\n        </div>\r\n    )\r\n\r\n})","import {Dispatch} from \"react\";\r\nimport {AppRootStateType} from \"./redux-store\";\r\nimport {ActionsType, decValueAC, incValueAC, setDisableAC} from \"./actions\";\r\n\r\n\r\nconst errorText = 'set value pls'\r\n\r\nexport type disableType = typeof initialState.disable\r\n\r\nconst initialState = {\r\n    interimValueMin: 0,\r\n    interimValueMax: 0,\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    disable: {\r\n        disabledSetValue: false,\r\n        disabledIncValue: false,\r\n        disabledDecValue: false,\r\n        disabledResetValue: false,\r\n    },\r\n    errorMessage: errorText,\r\n    error: true,\r\n    currentValue: 0,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n\r\nexport const counterReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_INTERIM_MAX_VALUE\": {\r\n            return {\r\n                ...state, interimValueMax: action.payload.max,\r\n                disable: {\r\n                    ...state.disable,\r\n                    disabledIncValue: state.interimValueMin >= action.payload.max || action.payload.max < 0,\r\n                    disabledSetValue: state.interimValueMin >= action.payload.max || action.payload.max < 0,\r\n                    disabledDecValue: state.interimValueMin >= action.payload.max || action.payload.max < 0,\r\n                    disabledResetValue: state.interimValueMin >= action.payload.max || action.payload.max < 0,\r\n                }\r\n\r\n            }\r\n        }\r\n        case \"SET_INTERIM_MIN_VALUE\": {\r\n            return {\r\n                ...state, interimValueMin: action.payload.min,\r\n                disable: {\r\n                    ...state.disable,\r\n                    disabledDecValue: action.payload.min >= state.interimValueMax || action.payload.min < 0,\r\n                    disabledSetValue: action.payload.min >= state.interimValueMax || action.payload.min < 0,\r\n                    disabledIncValue: action.payload.min >= state.interimValueMax || action.payload.min < 0,\r\n                    disabledResetValue: action.payload.min >= state.interimValueMax || action.payload.min < 0,\r\n                }\r\n            }\r\n        }\r\n        case 'SET_SETTINGS': {\r\n            return {\r\n                ...state,\r\n                maxValue: action.payload.maxValue,\r\n                minValue: action.payload.minValue,\r\n                currentValue: action.payload.minValue\r\n\r\n            }\r\n        }\r\n        case 'INCREASE_VALUE': {\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1\r\n            }\r\n        }\r\n        case 'DECREASE_VALUE': {\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue - 1\r\n            }\r\n        }\r\n        case 'SET_DISABLE': {\r\n            return {\r\n                ...state, disable: {\r\n                    ...state.disable,\r\n                    disabledDecValue: action.payload.disabledDecValue,\r\n                    disabledIncValue: action.payload.disabledIncValue,\r\n                    disabledSetValue: action.payload.disabledSetValue,\r\n                    disabledResetValue: action.payload.disabledResetValue\r\n                }\r\n            }\r\n        }\r\n        case 'SET_ERROR': {\r\n            return {...state, errorMessage: state.errorMessage, error: action.payload.error}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const thunkIncValue = () => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    if (state.counter.currentValue < state.counter.maxValue) {\r\n        dispatch(incValueAC({}))\r\n    }\r\n    if ((state.counter.maxValue - 1) === state.counter.currentValue) {\r\n        dispatch(setDisableAC({\r\n            disabledDecValue: false,\r\n            disabledIncValue: true,\r\n            disabledResetValue: false,\r\n            disabledSetValue: true\r\n        }))\r\n    }\r\n}\r\n\r\nexport const thunkDecValue = () => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    if (state.counter.currentValue > state.counter.minValue) {\r\n        dispatch(decValueAC({}))\r\n    }\r\n    if ((state.counter.minValue + 1) === state.counter.currentValue) {\r\n        dispatch(setDisableAC({\r\n            disabledSetValue: true,\r\n            disabledResetValue: false,\r\n            disabledIncValue: false,\r\n            disabledDecValue: true\r\n        }))\r\n    }\r\n}\r\n\r\n\r\n","import {AppRootStateType} from \"./redux-store\";\r\n\r\ninterface IRootState extends AppRootStateType {}\r\n\r\nexport const selectStateCounter = (state: IRootState) => state.counter\r\n","import React from 'react'\r\nimport {Button} from \"@material-ui/core\";\r\nimport style from './ResetViewController.module.css'\r\nexport type OutputValueType = {\r\n    error: boolean\r\n    textError: string\r\n    currentValue: number\r\n    disableBtn: {\r\n        disabledResetValue: boolean\r\n    }\r\n    reset: () => void\r\n}\r\n\r\nexport const ResetViewController = (props: OutputValueType) => {\r\n    return (\r\n        <div>\r\n            <div className={style.container}>\r\n                {props.error ?\r\n                    <span>{props.textError}</span>\r\n                    : <span>{props.currentValue}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className={style.container}>\r\n                <Button variant=\"contained\" color=\"secondary\" disabled={props.disableBtn.disabledResetValue}\r\n                        onClick={props.reset}>reset</Button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport './App.module.css';\r\nimport {Setup} from \"./componets/Setup/Setup\";\r\nimport {Buttons} from \"./componets/Buttons/Buttons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    thunkDecValue,\r\n    thunkIncValue,\r\n} from \"./state/counter-reducer\";\r\nimport {selectStateCounter} from \"./state/selectors\";\r\nimport {\r\n    setDisableAC,\r\n    setErrorMessageAC,\r\n    setInterimMaxValueAC,\r\n    setInterimMinValueAC,\r\n    setSettingsAC\r\n} from \"./state/actions\";\r\nimport {Paper} from \"@material-ui/core\";\r\nimport style from \"./App.module.css\"\r\nimport {ResetViewController} from \"./componets/ResetViewController/ResetViewController\";\r\n\r\n\r\nfunction App() {\r\n    // Пока вводим сообщение должны быть задизейблены кнопки INC и Reset и сообщение нажать кнопку Set\r\n    // Если Старт и Макс равны или Макс меньше Старт все кнопки задизейблены и сообщение об ошибке,\r\n    // подсветка инпутов во время ошибки\r\n    // После нажатия Set она дизейблится до начала ввода нового значение\r\n    // Сделать переключатель на ошибку , если ошибка то вывыести сообщение об ошибке , если ошибки нету то вывыести пожалуйста введите значение\r\n    // а если есть значение то показать значение\r\n\r\n    const {disable, maxValue, minValue, errorMessage, error, currentValue} = useSelector(selectStateCounter)\r\n    const dispatch = useDispatch()\r\n\r\n    const [min, setMin] = useState(minValue)\r\n    const [max, setMax] = useState(maxValue)\r\n\r\n    const onChangeSetValue = useCallback(() => {\r\n        setValue(min, max)\r\n    }, [min, max])\r\n\r\n    const onSetMinValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setMin(+e.currentTarget.value)\r\n        dispatch(setInterimMinValueAC({min: +e.currentTarget.value}))\r\n    }, [dispatch])\r\n\r\n    const onSetMaxValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setMax(+e.currentTarget.value)\r\n        dispatch(setInterimMaxValueAC({max: +e.currentTarget.value}))\r\n    }, [dispatch])\r\n\r\n    const setValue = useCallback((minValue: number, maxValue: number) => {\r\n        dispatch(setSettingsAC({minValue: minValue, maxValue: maxValue}))\r\n\r\n        dispatch(setErrorMessageAC({error: false}))\r\n    }, [dispatch])\r\n\r\n    const increaseValue = useCallback(() => {\r\n        dispatch(thunkIncValue())\r\n    }, [dispatch])\r\n\r\n    const decreaseValue = useCallback(() => {\r\n        dispatch(thunkDecValue())\r\n    }, [dispatch])\r\n\r\n    const resetValue = useCallback(() => {\r\n        setMax(0)\r\n        setMin(0)\r\n        dispatch(setErrorMessageAC({error: true}))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={style.app}>\r\n            <div className=\"wrapper\">\r\n                <Paper elevation={3}>\r\n                    <Setup error={error} disable={disable}\r\n                           onSetMaxValue={onSetMaxValue} onSetMinValue={onSetMinValue}\r\n                           maxValue={max} minValue={min}/>\r\n                    <Buttons  disableBtn={disable}\r\n                             minValue={min} maxValue={max}\r\n                             onChangeSetValue={onChangeSetValue}\r\n                             incValue={increaseValue}\r\n                             decValue={decreaseValue}/>\r\n                    <ResetViewController error={error} reset={resetValue} disableBtn={disable} textError={errorMessage} currentValue={currentValue}/>\r\n                </Paper>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers,applyMiddleware , createStore} from 'redux';\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n\r\n\r\n\r\nconst reducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/redux-store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}